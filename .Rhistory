legend.position = "right",
legend.title = element_text(size = 10, face = "bold", angle = 0, vjust = 0.5, hjust = 0),
legend.text = element_text(size = 10, face = "plain", angle = 0, vjust = 0.5, hjust = 0),
legend.spacing = unit(2, "cm"),
legend.key.size = unit(1, "cm"),
legend.spacing.y = unit(0.5, "cm")
) +
guides(color = guide_legend(override.aes = list(size = 6)), shape = guide_legend(override.aes = list(size = 6)))
p4
# Turn the plotly object into a plotly object with the select tool
p5 <- plotly::ggplotly(p4, tooltip = c("label"), source = "select")
p5
# Add the click event to the plotly object
p6 <- p5 %>% layout(hovermode = "closest") %>%
event_register("plotly_click") %>% # register the click event
onRender("
function(el) {
el.on('plotly_click', function(data) {
var point = data.points[0];
if (point) {
var text = point.text; // Get the text of the point
var splits = text.split('label:'); // Split the text by 'label:'
if (splits.length > 1) {
var acc_full = splits[1].trim(); // Remove leading/trailing whitespace
var acc_parts = acc_full.split('.'); // Split the accession by '.'
var acc = acc_parts[0]; // Only use the first part of the accession
var url = 'https://raw.githack.com/pentamorfico/network/main/html/' + acc + '.html';
window.open(url, '_blank'); // Open the URL in a new tab
}
}
});
}
")
p6
htmlwidgets::saveWidget(as_widget(p6), "nice_test.html")
View(cleaned_metadata)
# Make the original tree.
p2 <- ggtree(tree)
p2
# Read the metadata and clean it.
metadata <- p2$data %>% dplyr::inner_join(sorted_mix, c("label" = "ID"))
cleaned_metadata <- metadata %>% filter(!is.na(label))
# Add the metadata to the tree.
# p3 <- p2 + geom_tiplab(offset = 0.2, hjust = 0) +
#       geom_tippoint(data = cleaned_metadata, aes(shape = Mobility, color = AMR, size = Length, x = x + 2)) +
#       theme(legend.position = "top") +
#       # xlim(0, 140) +
#       scale_color_manual(values = c("#649AA8","#A592AF"))
# p3
# Add the metadata to the tree.
p3 <- p2 + geom_tiplab() +
geom_point(data = cleaned_metadata, aes(x = x, y = y, label = label, shape = Mobility, size = Length)) + #  colour = AMR,
theme(legend.position = "top") +
scale_color_manual(values = c("#649AA8","#A592AF"))
p3
# Add metadaat info.
row.names(cleaned_metadata) <- cleaned_metadata$label
new_meta <- cleaned_metadata %>% select(c(10:(ncol(cleaned_metadata) - 6)),"label") #ncol(sorted_mix)
new_meta <- new_meta %>% column_to_rownames(var = "label")
new_meta <- select(new_meta, everything()) #AMR_num,
new_meta <- new_meta %>% mutate_all(factor)
# Add the heatmap to the tree.
p4 <- gheatmap(p3, new_meta, offset= 1, width=0.1, font.size=3, colnames_angle=0, hjust=1, colnames_position = "top", colnames_offset_y = 3) +
# scale_fill_gradientn(colors = c("#E9E899", "#2C5986", "#141A3C"), values = scales::rescale(c(1, 2, 5))) +
# scale_fill_gradientn(colors = c("#ffffd9", "#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494", "#081d58"), values = scales::rescale(c(1, 2, 5))) +
scale_fill_manual(values = c("0" = "#C4E5EC", "1" = "#649AA8", "2" = "#326B7F")) +
theme(plot.margin = unit(c(1, 1, 1, 1), "cm"),
axis.text.y = element_text(size = 6, face = "plain", angle = 0, vjust = 0.5, hjust = 1),
legend.position = "right",
legend.title = element_text(size = 10, face = "bold", angle = 0, vjust = 0.5, hjust = 0),
legend.text = element_text(size = 10, face = "plain", angle = 0, vjust = 0.5, hjust = 0),
legend.spacing = unit(2, "cm"),
legend.key.size = unit(1, "cm"),
legend.spacing.y = unit(0.5, "cm")
) +
guides(color = guide_legend(override.aes = list(size = 6)), shape = guide_legend(override.aes = list(size = 6)))
p4
# Turn the plotly object into a plotly object with the select tool
p5 <- plotly::ggplotly(p4, tooltip = c("label"), source = "select")
p5
# Add the click event to the plotly object
p6 <- p5 %>% layout(hovermode = "closest") %>%
event_register("plotly_click") %>% # register the click event
onRender("
function(el) {
el.on('plotly_click', function(data) {
var point = data.points[0];
if (point) {
var text = point.text; // Get the text of the point
var splits = text.split('label:'); // Split the text by 'label:'
if (splits.length > 1) {
var acc_full = splits[1].trim(); // Remove leading/trailing whitespace
var acc_parts = acc_full.split('.'); // Split the accession by '.'
var acc = acc_parts[0]; // Only use the first part of the accession
var url = 'https://raw.githack.com/pentamorfico/network/main/html/' + acc + '.html';
window.open(url, '_blank'); // Open the URL in a new tab
}
}
});
}
")
p6
htmlwidgets::saveWidget(as_widget(p6), "nice_test.html")
p4
# Make the original tree.
p2 <- ggtree(tree)
p2
# Read the metadata and clean it.
metadata <- p2$data %>% dplyr::inner_join(sorted_mix, c("label" = "ID"))
cleaned_metadata <- metadata %>% filter(!is.na(label))
# Add the metadata to the tree.
# p3 <- p2 + geom_tiplab(offset = 0.2, hjust = 0) +
#       geom_tippoint(data = cleaned_metadata, aes(shape = Mobility, color = AMR, size = Length, x = x + 2)) +
#       theme(legend.position = "top") +
#       # xlim(0, 140) +
#       scale_color_manual(values = c("#649AA8","#A592AF"))
# p3
# Add the metadata to the tree.
p3 <- p2 + geom_tiplab() +
geom_point(data = cleaned_metadata, aes(x = x, y = y, label = label, shape = Mobility, size = Length)) + #  colour = AMR,
theme(legend.position = "top") +
scale_color_manual(values = c("#649AA8","#A592AF"))
p3
# Add metadaat info.
row.names(cleaned_metadata) <- cleaned_metadata$label
new_meta <- cleaned_metadata %>% select(c(10:(ncol(cleaned_metadata) - 6)),"label") #ncol(sorted_mix)
new_meta <- new_meta %>% column_to_rownames(var = "label")
new_meta <- select(new_meta, everything()) #AMR_num,
new_meta <- new_meta %>% mutate_all(factor)
# Add the heatmap to the tree.
p4 <- gheatmap(p3, new_meta, offset= 1, width=0.1, font.size=3, colnames_angle=0, hjust=1, colnames_position = "top", colnames_offset_y = 3) +
# scale_fill_gradientn(colors = c("#E9E899", "#2C5986", "#141A3C"), values = scales::rescale(c(1, 2, 5))) +
# scale_fill_gradientn(colors = c("#ffffd9", "#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494", "#081d58"), values = scales::rescale(c(1, 2, 5))) +
scale_fill_manual(values = c("0" = "#C4E5EC", "1" = "#649AA8", "2" = "#326B7F")) +
theme(plot.margin = unit(c(1, 1, 1, 1), "cm"),
axis.text.y = element_text(size = 6, face = "plain", angle = 45, vjust = 0.5, hjust = 1),
legend.position = "right",
legend.title = element_text(size = 10, face = "bold", angle = 0, vjust = 0.5, hjust = 0),
legend.text = element_text(size = 10, face = "plain", angle = 0, vjust = 0.5, hjust = 0),
legend.spacing = unit(2, "cm"),
legend.key.size = unit(1, "cm"),
legend.spacing.y = unit(0.5, "cm")
) +
guides(color = guide_legend(override.aes = list(size = 6)), shape = guide_legend(override.aes = list(size = 6)))
p4
# Turn the plotly object into a plotly object with the select tool
p5 <- plotly::ggplotly(p4, tooltip = c("label"), source = "select")
p5
# Add the click event to the plotly object
p6 <- p5 %>% layout(hovermode = "closest") %>%
event_register("plotly_click") %>% # register the click event
onRender("
function(el) {
el.on('plotly_click', function(data) {
var point = data.points[0];
if (point) {
var text = point.text; // Get the text of the point
var splits = text.split('label:'); // Split the text by 'label:'
if (splits.length > 1) {
var acc_full = splits[1].trim(); // Remove leading/trailing whitespace
var acc_parts = acc_full.split('.'); // Split the accession by '.'
var acc = acc_parts[0]; // Only use the first part of the accession
var url = 'https://raw.githack.com/pentamorfico/network/main/html/' + acc + '.html';
window.open(url, '_blank'); // Open the URL in a new tab
}
}
});
}
")
p6
htmlwidgets::saveWidget(as_widget(p6), "nice_test.html")
p4
# Make the original tree.
p2 <- ggtree(tree)
p2
# Read the metadata and clean it.
metadata <- p2$data %>% dplyr::inner_join(sorted_mix, c("label" = "ID"))
cleaned_metadata <- metadata %>% filter(!is.na(label))
# Add the metadata to the tree.
# p3 <- p2 + geom_tiplab(offset = 0.2, hjust = 0) +
#       geom_tippoint(data = cleaned_metadata, aes(shape = Mobility, color = AMR, size = Length, x = x + 2)) +
#       theme(legend.position = "top") +
#       # xlim(0, 140) +
#       scale_color_manual(values = c("#649AA8","#A592AF"))
# p3
# Add the metadata to the tree.
p3 <- p2 + geom_tiplab() +
geom_point(data = cleaned_metadata, aes(x = x, y = y, label = label, shape = Mobility, size = Length)) + #  colour = AMR,
theme(legend.position = "top") +
scale_color_manual(values = c("#649AA8","#A592AF"))
p3
# Add metadaat info.
row.names(cleaned_metadata) <- cleaned_metadata$label
new_meta <- cleaned_metadata %>% select(c(10:(ncol(cleaned_metadata) - 6)),"label") #ncol(sorted_mix)
new_meta <- new_meta %>% column_to_rownames(var = "label")
new_meta <- select(new_meta, everything()) #AMR_num,
new_meta <- new_meta %>% mutate_all(factor)
# Add the heatmap to the tree.
p4 <- gheatmap(p3, new_meta, offset= 1, width=0.1, font.size=3, colnames_angle=0, hjust=1, colnames_position = "top", colnames_offset_y = 3) +
# scale_fill_gradientn(colors = c("#E9E899", "#2C5986", "#141A3C"), values = scales::rescale(c(1, 2, 5))) +
# scale_fill_gradientn(colors = c("#ffffd9", "#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494", "#081d58"), values = scales::rescale(c(1, 2, 5))) +
scale_fill_manual(values = c("0" = "#C4E5EC", "1" = "#649AA8", "2" = "#326B7F")) +
theme(plot.margin = unit(c(1, 1, 1, 1), "cm"),
axis.text.y = element_text(size = 6, face = "plain", angle = 45, vjust = 0.5, hjust = 1),
legend.position = "right",
legend.title = element_text(size = 10, face = "bold", angle = 0, vjust = 0.5, hjust = 0),
legend.text = element_text(size = 10, face = "plain", angle = 0, vjust = 0.5, hjust = 0),
legend.spacing = unit(2, "cm"),
legend.key.size = unit(1, "cm"),
legend.spacing.y = unit(0.5, "cm")
) +
guides(color = guide_legend(override.aes = list(size = 6)), shape = guide_legend(override.aes = list(size = 6)))
p4
# Turn the plotly object into a plotly object with the select tool
p5 <- plotly::ggplotly(p4, tooltip = c("label"), source = "select")
p5
# Add the click event to the plotly object
p6 <- p5 %>% layout(hovermode = "closest") %>%
event_register("plotly_click") %>% # register the click event
onRender("
function(el) {
el.on('plotly_click', function(data) {
var point = data.points[0];
if (point) {
var text = point.text; // Get the text of the point
var splits = text.split('label:'); // Split the text by 'label:'
if (splits.length > 1) {
var acc_full = splits[1].trim(); // Remove leading/trailing whitespace
var acc_parts = acc_full.split('.'); // Split the accession by '.'
var acc = acc_parts[0]; // Only use the first part of the accession
var url = 'https://raw.githack.com/pentamorfico/network/main/html/' + acc + '.html';
window.open(url, '_blank'); // Open the URL in a new tab
}
}
});
}
")
p6
htmlwidgets::saveWidget(as_widget(p6), "nice_test.html")
# Make the original tree.
p2 <- ggtree(tree)
p2
# Read the metadata and clean it.
metadata <- p2$data %>% dplyr::inner_join(sorted_mix, c("label" = "ID"))
cleaned_metadata <- metadata %>% filter(!is.na(label))
# Add the metadata to the tree.
p3 <- p2 + geom_tiplab(offset = 0.2, hjust = 0) +
geom_tippoint(data = cleaned_metadata, aes(shape = Mobility, color = AMR, size = Length, x = x + 2)) +
theme(legend.position = "top") +
# xlim(0, 140) +
scale_color_manual(values = c("#649AA8","#A592AF"))
p3
# Make the original tree.
p2 <- ggtree(tree)
p2
# Read the metadata and clean it.
metadata <- p2$data %>% dplyr::inner_join(sorted_mix, c("label" = "ID"))
cleaned_metadata <- metadata %>% filter(!is.na(label))
# Add the metadata to the tree.
# p3 <- p2 + geom_tiplab(offset = 0.2, hjust = 0) +
#       geom_tippoint(data = cleaned_metadata, aes(shape = Mobility, color = AMR, size = Length, x = x + 2)) +
#       theme(legend.position = "top") +
#       # xlim(0, 140) +
#       scale_color_manual(values = c("#649AA8","#A592AF"))
# p3
# Add the metadata to the tree.
p3 <- p2 + geom_tiplab(offset = 0.2) +
geom_point(data = cleaned_metadata, aes(x = x, y = y, label = label, shape = Mobility, size = Length)) + #  colour = AMR,
theme(legend.position = "top") +
scale_color_manual(values = c("#649AA8","#A592AF"))
p3
# Add metadaat info.
row.names(cleaned_metadata) <- cleaned_metadata$label
new_meta <- cleaned_metadata %>% select(c(10:(ncol(cleaned_metadata) - 6)),"label") #ncol(sorted_mix)
new_meta <- new_meta %>% column_to_rownames(var = "label")
new_meta <- select(new_meta, everything()) #AMR_num,
new_meta <- new_meta %>% mutate_all(factor)
# Add the heatmap to the tree.
p4 <- gheatmap(p3, new_meta, offset= 1, width=0.1, font.size=3, colnames_angle=0, hjust=1, colnames_position = "top", colnames_offset_y = 3) +
# scale_fill_gradientn(colors = c("#E9E899", "#2C5986", "#141A3C"), values = scales::rescale(c(1, 2, 5))) +
# scale_fill_gradientn(colors = c("#ffffd9", "#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494", "#081d58"), values = scales::rescale(c(1, 2, 5))) +
scale_fill_manual(values = c("0" = "#C4E5EC", "1" = "#649AA8", "2" = "#326B7F")) +
theme(plot.margin = unit(c(1, 1, 1, 1), "cm"),
axis.text.y = element_text(size = 6, face = "plain", angle = 45, vjust = 0.5, hjust = 1),
legend.position = "right",
legend.title = element_text(size = 10, face = "bold", angle = 0, vjust = 0.5, hjust = 0),
legend.text = element_text(size = 10, face = "plain", angle = 0, vjust = 0.5, hjust = 0),
legend.spacing = unit(2, "cm"),
legend.key.size = unit(1, "cm"),
legend.spacing.y = unit(0.5, "cm")
) +
guides(color = guide_legend(override.aes = list(size = 6)), shape = guide_legend(override.aes = list(size = 6)))
p4
# Turn the plotly object into a plotly object with the select tool
p5 <- plotly::ggplotly(p4, tooltip = c("label"), source = "select")
p5
# Add the click event to the plotly object
p6 <- p5 %>% layout(hovermode = "closest") %>%
event_register("plotly_click") %>% # register the click event
onRender("
function(el) {
el.on('plotly_click', function(data) {
var point = data.points[0];
if (point) {
var text = point.text; // Get the text of the point
var splits = text.split('label:'); // Split the text by 'label:'
if (splits.length > 1) {
var acc_full = splits[1].trim(); // Remove leading/trailing whitespace
var acc_parts = acc_full.split('.'); // Split the accession by '.'
var acc = acc_parts[0]; // Only use the first part of the accession
var url = 'https://raw.githack.com/pentamorfico/network/main/html/' + acc + '.html';
window.open(url, '_blank'); // Open the URL in a new tab
}
}
});
}
")
p6
htmlwidgets::saveWidget(as_widget(p6), "nice_test.html")
# Make the original tree.
p2 <- ggtree(tree)
p2
# Read the metadata and clean it.
metadata <- p2$data %>% dplyr::inner_join(sorted_mix, c("label" = "ID"))
cleaned_metadata <- metadata %>% filter(!is.na(label))
# Add the metadata to the tree.
# p3 <- p2 + geom_tiplab(offset = 0.2, hjust = 0) +
#       geom_tippoint(data = cleaned_metadata, aes(shape = Mobility, color = AMR, size = Length, x = x + 2)) +
#       theme(legend.position = "top") +
#       # xlim(0, 140) +
#       scale_color_manual(values = c("#649AA8","#A592AF"))
# p3
# Add the metadata to the tree.
p3 <- p2 + geom_tiplab(offset = 5) +
geom_point(data = cleaned_metadata, aes(x = x, y = y, label = label, shape = Mobility, size = Length)) + #  colour = AMR,
theme(legend.position = "top") +
scale_color_manual(values = c("#649AA8","#A592AF"))
p3
# Add metadaat info.
row.names(cleaned_metadata) <- cleaned_metadata$label
new_meta <- cleaned_metadata %>% select(c(10:(ncol(cleaned_metadata) - 6)),"label") #ncol(sorted_mix)
new_meta <- new_meta %>% column_to_rownames(var = "label")
new_meta <- select(new_meta, everything()) #AMR_num,
new_meta <- new_meta %>% mutate_all(factor)
# Add the heatmap to the tree.
p4 <- gheatmap(p3, new_meta, offset= 1, width=0.1, font.size=3, colnames_angle=0, hjust=1, colnames_position = "top", colnames_offset_y = 3) +
# scale_fill_gradientn(colors = c("#E9E899", "#2C5986", "#141A3C"), values = scales::rescale(c(1, 2, 5))) +
# scale_fill_gradientn(colors = c("#ffffd9", "#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494", "#081d58"), values = scales::rescale(c(1, 2, 5))) +
scale_fill_manual(values = c("0" = "#C4E5EC", "1" = "#649AA8", "2" = "#326B7F")) +
theme(plot.margin = unit(c(1, 1, 1, 1), "cm"),
axis.text.y = element_text(size = 6, face = "plain", angle = 45, vjust = 0.5, hjust = 1),
legend.position = "right",
legend.title = element_text(size = 10, face = "bold", angle = 0, vjust = 0.5, hjust = 0),
legend.text = element_text(size = 10, face = "plain", angle = 0, vjust = 0.5, hjust = 0),
legend.spacing = unit(2, "cm"),
legend.key.size = unit(1, "cm"),
legend.spacing.y = unit(0.5, "cm")
) +
guides(color = guide_legend(override.aes = list(size = 6)), shape = guide_legend(override.aes = list(size = 6)))
p4
# Turn the plotly object into a plotly object with the select tool
p5 <- plotly::ggplotly(p4, tooltip = c("label"), source = "select")
p5
# Add the click event to the plotly object
p6 <- p5 %>% layout(hovermode = "closest") %>%
event_register("plotly_click") %>% # register the click event
onRender("
function(el) {
el.on('plotly_click', function(data) {
var point = data.points[0];
if (point) {
var text = point.text; // Get the text of the point
var splits = text.split('label:'); // Split the text by 'label:'
if (splits.length > 1) {
var acc_full = splits[1].trim(); // Remove leading/trailing whitespace
var acc_parts = acc_full.split('.'); // Split the accession by '.'
var acc = acc_parts[0]; // Only use the first part of the accession
var url = 'https://raw.githack.com/pentamorfico/network/main/html/' + acc + '.html';
window.open(url, '_blank'); // Open the URL in a new tab
}
}
});
}
")
p6
htmlwidgets::saveWidget(as_widget(p6), "nice_test.html")
tree
tree$edge
tree$Nnode
tree$tip.label
import plotly.graph_objects as go
tree
View(cleaned_metadata)
p3
rm(list=ls()) # clear all objects from R memory
knitr::opts_chunk$set(echo = TRUE)
library(ggtree)
library(magick)
library(ggimage)
library(TDbook)
library(dplyr)
library(treeio)
library(grid)
library(plotly)
library(tibble)
library(htmlwidgets)
# Set the prefix
prefix <- "pKPN3_like"
file_path_1 <- paste0("03_matrix_newick/", prefix, ".nwk")
file_path_2 <- paste0("04_metadata/", prefix, "_metadata.csv")
# Load the tree data.
tree <- read.tree(file_path_1)
# Make the original tree.
p <- ggplot(tree) + geom_tree() + theme_tree()
p
# Load the metadata.
mdata <- read.csv(file_path_2) # some taxonomy information in the metadata file are empty, so we need to fix it.
# 删除所有元素和为0的列
# mdata <- mdata %>% select_if(function(x) any(x != 0))
# 获取总列数
total_cols <- ncol(mdata)
# 选择需要保留的列（仅删除前5列）
selected_cols_idx <- (6:total_cols)
# 获取选定列的列名
selected_cols_names <- colnames(mdata)[selected_cols_idx]
# 计算所选列的列和并排序
col_sums <- apply(mdata[, selected_cols_names], 2, sum)
sorted_cols <- names(sort(col_sums, decreasing = TRUE))
# 获取未被选中的列
remaining_cols <- setdiff(colnames(mdata), sorted_cols)
# 重新排列列顺序
mdata_mix <- mdata[, c(sorted_cols, remaining_cols)]
# 创建新的分类列
mdata_mix <- mdata_mix %>% mutate(Defense = ifelse(Subtype != "", "With Defense", "None"))
# mdata_mix <- mdata_mix %>% mutate(AMR = ifelse(Gene_Symbol != "", "With AMR", "None"))
mdata_mix <- mdata_mix %>% mutate(Defense_num = ifelse(Subtype != "", 1, 0))
# mdata_mix <- mdata_mix %>% mutate(AMR_num = ifelse(Gene_Symbol != "", 1, 0))
# 重新排序数据，使其匹配树状结构
sorted_mix <- mdata_mix %>% arrange(match(ID, tree[['tip.label']]))
# 将 Acc 列放在第一列
sorted_mix <- select(sorted_mix, ID, everything())
# 导出整理后的数据
write.table(sorted_mix, file = "test_metadata.txt", sep = "\t", quote = FALSE, row.names = FALSE)
View(sorted_mix)
rm(list=ls()) # clear all objects from R memory
knitr::opts_chunk$set(echo = TRUE)
library(ggtree)
library(magick)
library(ggimage)
library(TDbook)
library(dplyr)
library(treeio)
library(grid)
library(plotly)
library(tibble)
library(htmlwidgets)
# Set the prefix
prefix <- "pNDM-MAR_like"
file_path_1 <- paste0("03_matrix_newick/", prefix, ".nwk")
file_path_2 <- paste0("04_metadata/", prefix, "_metadata.csv")
# Load the tree data.
tree <- read.tree(file_path_1)
# Make the original tree.
p <- ggplot(tree) + geom_tree() + theme_tree()
p
# Load the metadata.
mdata <- read.csv(file_path_2) # some taxonomy information in the metadata file are empty, so we need to fix it.
# 删除所有元素和为0的列
# mdata <- mdata %>% select_if(function(x) any(x != 0))
# 获取总列数
total_cols <- ncol(mdata)
# 选择需要保留的列（仅删除前5列）
selected_cols_idx <- (6:total_cols)
# 获取选定列的列名
selected_cols_names <- colnames(mdata)[selected_cols_idx]
# 计算所选列的列和并排序
col_sums <- apply(mdata[, selected_cols_names], 2, sum)
sorted_cols <- names(sort(col_sums, decreasing = TRUE))
# 获取未被选中的列
remaining_cols <- setdiff(colnames(mdata), sorted_cols)
# 重新排列列顺序
mdata_mix <- mdata[, c(sorted_cols, remaining_cols)]
# 创建新的分类列
mdata_mix <- mdata_mix %>% mutate(Defense = ifelse(Subtype != "", "With Defense", "None"))
# mdata_mix <- mdata_mix %>% mutate(AMR = ifelse(Gene_Symbol != "", "With AMR", "None"))
mdata_mix <- mdata_mix %>% mutate(Defense_num = ifelse(Subtype != "", 1, 0))
# mdata_mix <- mdata_mix %>% mutate(AMR_num = ifelse(Gene_Symbol != "", 1, 0))
# 重新排序数据，使其匹配树状结构
sorted_mix <- mdata_mix %>% arrange(match(ID, tree[['tip.label']]))
# 将 Acc 列放在第一列
sorted_mix <- select(sorted_mix, ID, everything())
# 导出整理后的数据
write.table(sorted_mix, file = "test_metadata.txt", sep = "\t", quote = FALSE, row.names = FALSE)
View(sorted_mix)
p2 <- ggtree(tree)
p2
plotly_tree <- ggplotly(p2)
# Step 3: Customize with JavaScript for clickable links (simplified example)
jsCode <- "document.addEventListener('plotly_click', function(data){
var point = data.points[0];
if(point.data.name) {
var url = 'https://raw.githack.com/pentamorfico/network/main/html/' + point.data.name + '.html';
window.open(url, '_blank');
}
});"
plotly_tree <- plotly_tree %>% onRender(jsCode)
p2 <- ggtree(tree)
p2
# Read the metadata and clean it.
metadata <- p2$data %>% dplyr::inner_join(sorted_mix, c("label" = "ID"))
cleaned_metadata <- metadata %>% filter(!is.na(label))
View(cleaned_metadata)
